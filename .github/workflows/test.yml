name: Test
on:
  workflow_dispatch:
  pull_request:
    paths: ["action.yml", ".github/workflows/test.yml"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: {}

defaults:
  run:
    shell: bash

env:
  DEFAULT_CONFIG_PATH: .goreleaser.yml

jobs:
  test-configuration-path:
    name: Test for configuration-path
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: tmknom/checkout-action@v1

      - name: Setup
        id: setup
        run: |
          set -x
          rm -f "${DEFAULT_CONFIG_PATH}"

          config="${RUNNER_TEMP}/.goreleaser.yml"
          cat <<EOF >"${config}"
          version: 2
          builds:
            - main: ./.github/fixtures/main.go
              goos: [linux]
          EOF
          echo "path=${config}" >> "${GITHUB_OUTPUT}"

      - name: Exercise
        id: exercise
        uses: ./
        with:
          configuration-path: ${{ steps.setup.outputs.path }}
          dry-run: "true"

      - name: Verify
        env:
          CONFIGURATION_PATH: ${{ steps.exercise.outputs.configuration-path }}
          CONFIGURATION_DIGEST: ${{ steps.exercise.outputs.configuration-digest }}
        run: |
          set -x
          test "${CONFIGURATION_PATH}" = "${RUNNER_TEMP}/.goreleaser.yml"
          test "${CONFIGURATION_DIGEST}" = "sha256:a459d888fcc3094e6046b6490b9ee3af0f36703f6a4dc0f05f111353f0177dca"

  test-configuration-url:
    name: Test for configuration-url
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: tmknom/checkout-action@v1

      - name: Setup
        run: |
          set -x
          rm -f "${DEFAULT_CONFIG_PATH}"

      - name: Exercise
        id: exercise
        uses: ./
        with:
          configuration-url: https://raw.githubusercontent.com/tmknom/cross-goreleaser-action/37a939a4421d377d7a6156214f0f42a83a73d673/.github/fixtures/test.yml
          dry-run: "true"

      - name: Verify
        env:
          CONFIGURATION_PATH: ${{ steps.exercise.outputs.configuration-path }}
          CONFIGURATION_DIGEST: ${{ steps.exercise.outputs.configuration-digest }}
        run: |
          set -x
          [[ "${CONFIGURATION_PATH}" =~ "${RUNNER_TEMP}"/__[^/]*/goreleaser-.*\.yml ]]
          test "${CONFIGURATION_DIGEST}" = "sha256:a459d888fcc3094e6046b6490b9ee3af0f36703f6a4dc0f05f111353f0177dca"

  test-omit:
    name: Test for omit
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: tmknom/checkout-action@v1

      - name: Setup
        run: |
          set -x
          cat <<EOF >"${DEFAULT_CONFIG_PATH}"
          version: 2
          builds:
            - main: ./.github/fixtures/main.go
              goos: [linux]
          EOF

      - name: Exercise
        id: exercise
        uses: ./
        with:
          dry-run: "true"

      - name: Verify
        env:
          CONFIGURATION_PATH: ${{ steps.exercise.outputs.configuration-path }}
          CONFIGURATION_DIGEST: ${{ steps.exercise.outputs.configuration-digest }}
        run: |
          set -x
          test "${CONFIGURATION_PATH}" = ".goreleaser.yml"
          test "${CONFIGURATION_DIGEST}" = "sha256:a459d888fcc3094e6046b6490b9ee3af0f36703f6a4dc0f05f111353f0177dca"

  test-homebrew-tap:
    name: Test for homebrew-tap
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: write
      packages: read
      id-token: write
    steps:
      - name: Checkout
        uses: tmknom/checkout-action@v1

      - name: Setup
        id: setup
        run: |
          set -x
          rm -f "${DEFAULT_CONFIG_PATH}"

          config="${RUNNER_TEMP}/.goreleaser.yml"
          cat <<EOF >"${config}"
          version: 2
          builds:
            - main: ./.github/fixtures/main.go
              goos: [darwin]
          brews:
            - repository:
                owner: "{{ .Env.GITHUB_REPOSITORY_OWNER }}"
                name: "{{ .Env.HOMEBREW_TAP_REPOSITORY }}"
                branch: update/{{ .ProjectName }}_{{ .FullCommit }}
                token: "{{ .Env.HOMEBREW_TAP_GITHUB_TOKEN }}"
                pull_request:
                  enabled: true
              commit_author:
                name: github-actions[bot]
                email: 41898282+github-actions[bot]@users.noreply.github.com
              directory: Formula
          release:
            draft: true
          EOF
          echo "path=${config}" >> "${GITHUB_OUTPUT}"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Pull secrets image
        env:
          IMAGE: ghcr.io/tmknom/internal-secrets/hcp:latest
        run: |
          set -x
          docker pull "${IMAGE}"

      - name: Describe encrypted secrets
        id: encrypted
        env:
          IMAGE: ghcr.io/tmknom/internal-secrets/hcp:latest
        run: |
          labels="$(docker inspect "${IMAGE}" | jq -c '.[0].Config.Labels')"
          echo "::add-mask::${labels}"

          project_id="$(jq -r '.project_id' <<<"${labels}")"
          echo "::add-mask::${project_id}"
          echo "project-id=${project_id}" >> "${GITHUB_OUTPUT}"

          service_account="$(jq -r '.service_account' <<<"${labels}")"
          echo "::add-mask::${service_account}"
          echo "service-account=${service_account}" >> "${GITHUB_OUTPUT}"

          secrets_app="$(jq -r '.secrets_app' <<<"${labels}")"
          echo "::add-mask::${secrets_app}"
          echo "secrets-app=${secrets_app}" >> "${GITHUB_OUTPUT}"

      - name: Decrypt HCP Project ID
        id: hcp-project-id
        uses: tmknom/symmetric-encrypt-decrypt-action@7b99754b4745d076fee506388900124b777880d3 # v0.1.2
        with:
          data: ${{ steps.encrypted.outputs.project-id }}
          key: key-hcp-project-id-${{ github.repository_owner_id }}-${{ github.repository_owner }}/internal-secrets
          iv: iv-hcp-project-id-${{ github.repository_owner_id }}-${{ github.repository_owner }}/internal-secrets
          operation: decrypt

      - name: Decrypt HCP Service Account
        id: hcp-service-account
        uses: tmknom/symmetric-encrypt-decrypt-action@7b99754b4745d076fee506388900124b777880d3 # v0.1.2
        with:
          data: ${{ steps.encrypted.outputs.service-account }}
          key: key-hcp-service-account-${{ github.repository_owner_id }}-${{ github.repository_owner }}/internal-secrets
          iv: iv-hcp-service-account-${{ github.repository_owner_id }}-${{ github.repository_owner }}/internal-secrets
          operation: decrypt

      - name: Decrypt HCP Secrets App
        id: hcp-secrets-app
        uses: tmknom/symmetric-encrypt-decrypt-action@7b99754b4745d076fee506388900124b777880d3 # v0.1.2
        with:
          data: ${{ steps.encrypted.outputs.secrets-app }}
          key: key-hcp-secrets-app-${{ github.repository_owner_id }}-${{ github.repository_owner }}/internal-secrets
          iv: iv-hcp-secrets-app-${{ github.repository_owner_id }}-${{ github.repository_owner }}/internal-secrets
          operation: decrypt

      - name: Generate HCP workload identity provider
        id: hcp
        env:
          PROJECT_ID: ${{ steps.hcp-project-id.outputs.result }}
          SERVICE_ACCOUNT: ${{ steps.hcp-service-account.outputs.result }}
          SECRETS_APP: ${{ steps.hcp-secrets-app.outputs.result }}
        run: |
          provider="iam/project/${PROJECT_ID}/service-principal/${SERVICE_ACCOUNT}/workload-identity-provider/${SECRETS_APP}"
          echo "::add-mask::${provider}"
          echo "provider=${provider}" >> "${GITHUB_OUTPUT}"

      - name: Authenticate to HCP
        uses: hashicorp/hcp-auth-action@b11d0bff4bbe76283448ddca08a4a4e93c5ed4b9 # v0.1.0
        with:
          workload_identity_provider: ${{ steps.hcp.outputs.provider }}
          audience: ${{ github.repository }}:${{ github.repository_id }}
        timeout-minutes: 1

      - name: Download hcp CLI
        uses: hashicorp/hcp-setup-action@fa6934c14c661dfbe9b6cf9c47ddb41759d625aa # v0.1.0
        with:
          version: latest

      - name: Describe GitHub Apps credentials
        id: github
        env:
          SECRETS_APP: ${{ steps.hcp-secrets-app.outputs.result }}
        run: |
          secrets=(hcp vault-secrets secrets open --app "${SECRETS_APP}" --format=json)

          PR_WRITER_APP_ID="$("${secrets[@]}" PR_WRITER_APP_ID | jq -r '.static_version.value')"
          echo "::add-mask::${PR_WRITER_APP_ID}"
          echo "app-id=${PR_WRITER_APP_ID}" >> "${GITHUB_OUTPUT}"

          key_file="${RUNNER_TEMP}/private.key"
          "${secrets[@]}" PR_WRITER_APP_PRIVATE_KEY | jq -r '.static_version.value' > "${key_file}"
          echo "app-private-key-file=${key_file}" >> "${GITHUB_OUTPUT}"

      - name: Generate GitHub Token
        id: app
        uses: tmknom/generate-github-token-action@e0f9098bfea71c5b68642fcbd1c2e690932856b1 # v0.1.0
        with:
          app-id: ${{ steps.github.outputs.app-id }}
          app-private-key-file: ${{ steps.github.outputs.app-private-key-file }}
          repositories: homebrew-test-tap

      - name: Push tag
        id: tag
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -x
          version="v0.0.1-alpha-${GITHUB_SHA}"
          git tag "${version}"
          git push origin "${version}"
          echo "version=v${version}" >> "${GITHUB_OUTPUT}"
          rm "${GHA_HCP_CRED_FILE}"

      - name: Exercise
        id: exercise
        uses: ./
        with:
          configuration-path: ${{ steps.setup.outputs.path }}
          homebrew-tap-repository: homebrew-test-tap
          homebrew-tap-github-token: ${{ steps.app.outputs.token }}

      - name: Verify
        env:
          CONFIGURATION_PATH: ${{ steps.exercise.outputs.configuration-path }}
          CONFIGURATION_DIGEST: ${{ steps.exercise.outputs.configuration-digest }}
        run: |
          set -x
          test "${CONFIGURATION_PATH}" = "${RUNNER_TEMP}/.goreleaser.yml"
          test "${CONFIGURATION_DIGEST}" = "sha256:66c1a6cd29488e8477bf0be037519308af30ff2515d46e0700ccb4d822eb181f"

      - name: Teardown
        if: ${{ always() }}
        env:
          VERSION: ${{ steps.tag.outputs.version }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -x
          gh release delete "${version}" --cleanup-tag --yes || true

  test-error:
    name: Test for error
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: tmknom/checkout-action@v1

      - name: Setup
        run: |
          set -x
          rm -f "${DEFAULT_CONFIG_PATH}"

      - name: Exercise
        id: exercise
        uses: ./
        with:
          dry-run: "true"
        continue-on-error: true

      - name: Verify
        if: ${{ always() }}
        env:
          OUTCOME: ${{ steps.exercise.outcome }}
        run: |
          set -x
          test "${OUTCOME}" = "failure"

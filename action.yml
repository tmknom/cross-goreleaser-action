name: Cross GoReleaser
description: |
  This action serves as a convenient wrapper for [goreleaser/goreleaser-action][goreleaser].

  ## Usage

  To set up the action, you need to create a YAML file that defines your configurations.
  Refer to the detailed configuration syntax for the GoReleaser in [goreleaser/goreleaser-action][goreleaser].

  ### Configuration URL

  ```yaml
    steps:
      - name: Cross GoReleaser
        uses: tmknom/cross-goreleaser-action@v0
        with:
          configuration-url: https://raw.githubusercontent.com/tmknom/configurations/main/goreleaser/cli.yml
  ```

  ### Configuration Path

  ```yaml
    steps:
      - name: Cross GoReleaser
        uses: tmknom/cross-goreleaser-action@v0
        with:
          configuration-path: .goreleaser.yml
  ```

inputs:
  configuration-url:
    required: false
    description: The url for the GoReleaser configurations.
  configuration-path:
    required: false
    description: The path for the GoReleaser configurations.
  homebrew-tap-repository:
    type: string
    required: false
    description: The repository for Homebrew formulae used to install tools on macOS.
  homebrew-tap-github-token:
    type: string
    required: false
    description: The GitHub Apps token for accessing the repository used by Homebrew formulae.
  dry-run:
    default: "false"
    required: false
    description: Whether to use snapshot mode when invoking GoReleaser.

outputs:
  configuration-path:
    value: ${{ steps.config.outputs.path }}
    description: The path for the configuration file to passing goreleaser/goreleaser-action.
  configuration-digest:
    value: ${{ steps.config.outputs.digest }}
    description: Digest of the configuration file that is in the form "algorithm:hex_digest" (e.g. `sha256:abc123...`).

runs:
  using: composite

  steps:
    - name: Create working directory
      id: work
      run: |
        echo "::group::Create working directory"
        set -x
        repo="$(cut -d / -f 7 <<<"${GITHUB_ACTION_PATH/./${GITHUB_REPOSITORY_ID}}")"
        owner="$(cut -d / -f 6 <<<"${GITHUB_ACTION_PATH}")"
        sha256="$(sha256sum "${GITHUB_ACTION_PATH}/action.yml" | cut -d ' ' -f 1)"

        workdir="${RUNNER_TEMP}/__${owner}-${repo}-${sha256}"
        echo "dir=${workdir}" >> "${GITHUB_OUTPUT}"
        mkdir -p "${workdir}"
        echo "::endgroup::"
      shell: bash

    - name: Traceable Identifier
      id: traceable
      uses: tmknom/traceable-identifier-action@6555160c543eb771a876fb4ceaecd43ec79df7b6 # v0.1.0

    # curl options
    #
    # --silent: Silent or quiet mode.
    # --show-error: When used with -s, --silent, it makes curl show an error message if it fails.
    # --location: If the server reports that the requested page has moved to a different location, redo the request on the new place.
    # --output <file>: Write output to <file> instead of stdout.
    - name: Download configuration
      id: download
      if: ${{ inputs.configuration-url != '' }}
      working-directory: ${{ steps.work.outputs.dir }}
      env:
        PREFIX: goreleaser
        IDENTIFIER: ${{ steps.traceable.outputs.identifier }}
        CONFIGURATION_URL: ${{ inputs.configuration-url }}
      run: |
        echo "::group::Download configuration"
        set -x
        config="${PWD}/${PREFIX}-${IDENTIFIER}.yml"
        curl --silent --show-error --location --output "${config}" "${CONFIGURATION_URL}"
        echo "path=${config}" >> "${GITHUB_OUTPUT}"
        echo "::endgroup::"
      shell: bash

    - name: Validate configuration
      id: config
      env:
        CONFIG_PATH: ${{ steps.download.outputs.path || inputs.configuration-path }}
        DEFAULT_CONFIG_PATH: .goreleaser.yml
      run: |
        echo "::group::Validate configuration"
        set -x
        if [[ "${CONFIG_PATH}" != "" && -f "${CONFIG_PATH}" ]]; then
          valid="${CONFIG_PATH}"
        elif [[ -f "${DEFAULT_CONFIG_PATH}" ]]; then
          title="configuration file was omitted"
          message="recommend explicitly specifying the configuration file"
          echo "::warning title=${title}::${message}"
          valid="${DEFAULT_CONFIG_PATH}"
        else
          title="not found configuration file"
          message="ensure that you specify valid configuration-path or configuration-url"
          echo "::error title=${title}::${message}"
          exit 1
        fi
        echo "path=${valid}" >> "${GITHUB_OUTPUT}"
        echo "digest=sha256:$(sha256sum "${valid}" | cut -d' ' -f1)" >> "${GITHUB_OUTPUT}"
        echo "::endgroup::"
      shell: bash

    - name: Show configuration
      env:
        CONFIG_PATH: ${{ steps.config.outputs.path }}
      run: |
        echo "::group::Show configuration"
        set -x
        cat "${CONFIG_PATH}"
        echo "::endgroup::"
      shell: bash

    - name: Switch dry run
      id: dry-run
      if: ${{ inputs.dry-run != 'false' }}
      run: |
        echo "args=--snapshot" >> "${GITHUB_OUTPUT}"
      shell: bash

    - name: Run GoReleaser
      if: ${{ inputs.homebrew-tap-repository == '' }}
      uses: goreleaser/goreleaser-action@9ed2f89a662bf1735a48bc8557fd212fa902bebf # v6.1.0
      with:
        distribution: goreleaser
        version: ~> v2
        args: release --clean --config ${{ steps.config.outputs.path }} ${{ steps.dry-run.outputs.args }}
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Run GoReleaser with Homebrew
      if: ${{ inputs.homebrew-tap-repository != '' }}
      uses: goreleaser/goreleaser-action@9ed2f89a662bf1735a48bc8557fd212fa902bebf # v6.1.0
      with:
        distribution: goreleaser
        version: ~> v2
        args: release --clean --config ${{ steps.config.outputs.path }} ${{ steps.dry-run.outputs.args }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
        HOMEBREW_TAP_REPOSITORY: ${{ inputs.homebrew-tap-repository }}
        HOMEBREW_TAP_GITHUB_TOKEN: ${{ inputs.homebrew-tap-github-token }}
